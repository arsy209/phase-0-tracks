#release one
#Add a method to your file that takes a number of Fibonacci terms to generate and returns an array of the terms. For example, fib(6) would return [0,1,1,2,3,5]. Your method should work for a large number of terms. To verify your work: the last number in the array generated by fib(100) will be 218922995834555169026.

#release2 
#Choose a simple sorting algorithm to learn about. Bubble sort or insertion sort are good ones for beginners, but you're welcome to be more adventurous.
#Form a conceptual understanding of how the algorithm works. What helps you grasp it? Do visualizations help? How can you find the right materials for yourself?
#Notice your emotional state as you tackle this algorithm: do you feel frustrated, underqualified, stupid, or overwhelmed? Or is it more like excitement and curiosity? How do you think these feelings affect your ability to learn?

def random_number(number)
  fibonacci = [1,0]
  n = number - 2
  p = 0
  q = 1
n.times do
  num = p
  p = q
  q = num + q
  fibonacci << q
  end
      return fibonacci
end

#create a driver code for the user to input their number of choice
#it would first run the number by taking the first one and assigning it 1 and 0. 


print "Please input a number of your choice: "
number = gets.chomp.to_i
p random_number(number)


def bubble_sort(fibonacci)
  a = fibonacci.length
 swapped = true
while swapped do
	swapped = false
    (a-1).times do |new_number_list|
      if fibonacci[new_number_list] > fibonacci[new_number_list+1]
        fibonacci[new_number_list], fibonacci[new_number_list+1] = fibonacci[new_number_list+1], fibonacci[new_number_list]
        swapped = true
      end
    end
    swapped
  end

  fibonacci
end
#this is just an example to show that the above method works correctly
example = [1,2,6,4,88,343,6]
p bubble_sort(example)
